---
title: "Day 2A Practice"
format:
  html:
    df-print: paged
---

![](../img/maintenance_2780E3.svg){.hero}

```{r}
#| echo: false
#| message: false

library(tidyverse)
```

## Question 1.

Load the `economics` tibble (included in \{tidyverse\}). Then create a pipeline to accomplish the following data wrangling steps:

a)  First, in the `economics` tibble, rename the `uempmed` variable (the median duration of enemployment, in weeks) to `duration` and the `unemploy` variable (the number of unemployed, in thousands) to `number`.
b)  Then add a new variable called `rate` that is calculated by dividing `number` (from part a) by `pop` (the total population, in thousands).
c)  Then drop (i.e., unselect) the `pce`, `pop`, and `psavert` variables from the tibble.
d)  Then relocate the `rate` variable to be between the `date` and `duration` variables.

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

**Answer (a)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy)
```

**Answer (b)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop)
```

**Answer (c)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop) |> 
  select(-c(pce, pop, psavert))
```

**Answer (d)**

```{r}
economics |>
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop) |> 
  select(-c(pce, pop, psavert)) |> 
  relocate(rate, .after = date)
```

</blockquote>
</details></p>

## Question 2.

Download the [cereal](https://pittmethods.github.io/r4ss/data/cereal.csv) data file from the [workshop website](../Details/datasets.qmd). Copy it to your Project folder and read it into R as a tibble. Then create a pipeline to produce a short list of cereals for me to try. I am only interested in cold cereals with a rating greater than 70. Please arrange the list so that the cereals with the fewest calories are displayed at the top. Finally, write the result of this pipeline to a CSV file called "jeffs_list.csv" (I expect it to be even more popular than Craig's list).

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

```{r}
#| eval: false
#| message: false

cereal <- read_csv("cereal.csv") 

jeffs_list <- 
  cereal |> 
  filter(type == "cold" & rating > 70) |> 
  arrange(calories)

jeffs_list
```

```{r}
#| echo: false
#| message: false

cereal <- read_csv("../data/cereal.csv") 

jeffs_list <- 
  cereal |> 
  filter(type == "cold" & rating > 70) |> 
  arrange(calories)

jeffs_list
```

```{r}
#| eval: false

write_csv(jeffs_list, "jeffs_list.csv")
```

</blockquote>
</details></p>

## Question 3

a) Transform the `drv` variable in the `mpg` tibble into a factor where "4" is labeled Four Wheel Drive, "r" is labelled Rear Wheel Drive, and "f" is labeled Front Wheel Drive. Save this updated tibble as `mpg2`.

b) Transform the `manufacturer` and `model` variables in the `mpg2` tibble so that the first letter of each word is capitalized. Save this updated tibble as `mpg3`.

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

**Answer (a)**

```{r}
#| comment: "#>"
#| collapse: true

mpg2 <- 
  mpg |> 
  mutate(
    drv = factor(
      drv, 
      levels = c("4", "r", "f"), 
      labels = c("Four Wheel Drive", "Rear Wheel Drive", "Front Wheel Drive")
    )
  )
mpg2
```

**Answer (b)**

```{r}
#| comment: "#>"
#| collapse: true
#| warning: false

mpg3 <- 
  mpg2 |> 
  mutate(
    manufacturer = str_to_title(manufacturer),
    model = str_to_title(model)
  )
mpg3
```

</blockquote></details></p>

## Resources

-   [R4DS Chapter 5](https://r4ds.had.co.nz/transform.html) (§5.1–§5.5): Read more about the basic wrangling verbs 

-   [R4DS Chapter 18](https://r4ds.had.co.nz/pipes.html): Read more about pipes and pipelines^[Note that this chapter talks about `%>%` being the pipe operator, which might confuse you at first since I am teaching `|>` as the pipe. Basically, `|>` is newer and requires no packages to be installed; it often called the "native pipe" as in it is built into R natively.]

-   [R4DS Chapter 15](https://r4ds.had.co.nz/factors.html): Read more about working with factors in R

-   [Schafer \& Graham (2002)](https://doi.org/10/dsvqnz): Read more about missing data analysis^[Note that ignoring missing values can lead to estimation bias and reduced power when performing statistical inference. Read this paper to learn more about better approaches, which can be done in R (e.g., using the \{mice\} package for [multiple imputation](https://stefvanbuuren.name/fimd/) or the \{lavaan\} package for [full information maximum likelihood](https://lavaan.ugent.be/tutorial/est.html)).]

## Fun Stuff

### Stunt Rope

These are some advanced wrangling verbs...

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/flcFl8z_hF4?start=99" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### Pipeline

The official theme song of pipelines everywhere...

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/56SAxtf-RTg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
