{
  "hash": "a9374225d136b0fc72e4443bfb029d71",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"R4SS Day 1B\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2022-07-25\"\n---\n\n\n::: {.my-title}\n# [Introduction to R]{.blue} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 1B | 2022-07-25]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n<!-- Program II -->\n\n# Program II\n\n## Functions {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Recipes]{.b .green} allow chefs to cook up tasty treats\n    -   Recipes call for ingredients\n    -   Recipes involve one or more steps\n    -   Steps transform ingredients into treats\n\n::: {.fragment .mt1}\n-   [Functions]{.b .blue} are like *customizable* recipes\n    -   Functions call for inputs (\"arguments\")\n    -   Functions involve one or more lines of code\n    -   Code transforms inputs into outputs\n    -   Using functions requires parentheses (usually)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li vpqdjfdy trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`out <- f(in1, in2)`\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Program II\n:::\n\n## Functions Live Coding\n\n\n::: {.cell hash='r4ss_day1b_cache/revealjs/unnamed-chunk-1_05d60556be12be4b24c48f91e5c44886'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Function can perform a task more easily and readably\n\n# TEMPLATE: output <- function_name(input)\n\n9 ^ (1 / 2)\n\nx <- sqrt(9)\nx\n\n# ==============================================================================\n\n# LESSON: We can also use functions to transform objects\n\ny <- 9\n\nsqrt(y)\n\n# ==============================================================================\n\n# LESSON: We can even use functions to transform the result of calculations\n\n2 / 3\n\nround(2 / 3)\n\n# ==============================================================================\n\n# LESSON: We can customize what a function does using arguments\n\n# TEMPLATE: output <- function_name(argument, argument_name = argument_value)\n\nround(2 / 3, digits = 2)\n\nround(2 / 3, digits = 3)\n\n# ==============================================================================\n\n# LESSON: Some arguments are optional because they have default values\n\nround(2 / 3) # the default value for digits is 0\n\nround(2 / 3, digits = 0)\n```\n:::\n\n\n::: footer\n\\[1B\\] Program II\n:::\n\n## Vectors {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Vectors]{.b .blue} combine similar objects into a collection\n    -   *I like to imagine a train pulling multiple cars*<br />\n    ![](../img/traincar.png)\n    -   A vector is one object with many sub-objects\n    -   We refer to each sub-object as an [element]{.b .green}\n\n::: {.fragment .mt1}\n-   Some functions [transform each element]{.b .green} in turn\n    -   *Double the amount of cargo in every train car*\n:::\n\n::: {.fragment .mt1}\n-   Some functions [summarize across elements]{.b .green}\n    -   *Calculate the total cargo across all train cars*\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li bqmoqptv trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`v <- c(1, 2, 3)`\n:::\n\n:::\n:::\n\n::: footer\n\\[1B\\] Program II\n:::\n\n## Vectors Live Coding\n\n\n::: {.cell hash='r4ss_day1b_cache/revealjs/unnamed-chunk-2_90a1755fa54ef8975dc208e4cba30f3d'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: We can combine multiple elements into a vector\n\n# TEMPLATE: vector_name <- c(element1, element2, element3)\n\nx <- 4 9 16 25 # error\n\nx <- c(4, 9, 16, 25)\nx\n\ny <- c(2, 3)\ny\n\n# ==============================================================================\n\n# LESSON: We can also combine multiple vectors and elements\n\nc(x, y)\n\nc(x, y, 20)\n\n# ==============================================================================\n\n# USECASE: Math operators will transform each element individually\n\nx + 1\n\nx * 3\n\nx # but again, this won't be saved unless you use assignment\n\n# ==============================================================================\n\n# USECASE: Some functions will also transform each element individually\n\nsqrt(x)\n\nlog(x)\n\n# ==============================================================================\n\n# USECASE: Other functions will summarize the vector with a single number\n\nlength(x)\n\nsum(x)\n\nmean(x)\n```\n:::\n\n\n::: footer\n\\[1B\\] Program II\n:::\n\n<!-- Insert quiz and short break here? -->\n\n## Strings {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   When talking to R, we need a way to distinguish\n    -   Object/function names (e.g., the *mean* function)\n    -   Text/character data (e.g., the word *mean*)\n    \n::: {.fragment .mt1}\n-   [Strings]{.b .blue} are R's way of storing text data\n    -   Strings can store any characters (no rules!)\n    -   Strings are created and displayed with [quotes]{.b .green}\n:::\n::: {.fragment .mt1}\n-   R has great tools for working with strings\n    -   Strings can be collected into vectors\n    -   Special functions can transform strings\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`name <- \"John Doe\"`\n:::\n\n:::\n:::\n\n::: footer\n\\[1B\\] Program II\n:::\n\n## Strings Live Coding\n\n\n::: {.cell hash='r4ss_day1b_cache/revealjs/unnamed-chunk-3_f18086e38474e0d339d3a72ffcf247a4'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Strings are the main way to store character data in R\n \nmy_color <- red # error\n\nmy_color <- \"red\" # correct\n\n# ==============================================================================\n\n# USECASE: Strings can also store symbols not allowed in object names\n\ndye <- \"red#40\"\ndye\n\ndyes <- c(\"red#40\", \"blue#02\")\ndyes\n\n# ==============================================================================\n\n# PITFALL: Many operations you can do to numbers won't work for strings\n\ndyes + 1 # error\n\nmean(dyes) # error\n\n# ==============================================================================\n\n# USECASE: But other operations work for both or even just for strings\n\nlength(dyes)\n\nnchar(dyes)\n\ndyes2 <- toupper(dyes)\ndyes2\n```\n:::\n\n\n::: footer\n\\[1B\\] Program II\n:::\n\n## Packages {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Cookbooks]{.b .green} are a great way to learn to cook\n    -   *They contain lots of recipes and instructions*\n    -   Browse an online **bookstore** for a cookbook\n    -   **Order** it to add it to your personal **bookshelf**\n    -   To use, **pull** the cookbook off the shelf\n\n::: {.fragment .mt1}\n-   [Packages]{.b .blue} are like cookbooks for R\n    -   *They contain helpful functions and datasets*\n    -   Browse an online **repository** for a package\n    -   **Install** it to add it to your personal **library**\n    -   To use, **load** the package from the library\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`library(\"pkg_name\")`\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Program II\n:::\n\n## Packages Live Coding\n\n\n::: {.cell hash='r4ss_day1b_cache/revealjs/unnamed-chunk-4_6e4f7e74ee19c941497f2d011c05ae39'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: The stringr package adds a function to fix capitalization\n\nstudents <- c(\"mary anne\", \"BENjamin\", \"Lee\")\n\n# ==============================================================================\n\n# PITFALL: But we can't use that function without installing the package\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LESSON: Installing a package using RStudio\n\n# - RStudio > Extras pane > Packages tab > Install button\n\n# ==============================================================================\n\n# PITFALL: We also need to load the package before we can use it\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LESSON: We load the package using library()\n\nlibrary(\"stringr\")\nstr_to_title(students) #finally works!\n\n# ==============================================================================\n\n# LESSON: We can also keep our packages updated using RStudio\n\n# RStudio > Extras pane > Packages tab > Update button\n```\n:::\n\n\n::: footer\n\\[1B\\] Program II\n:::\n\n<!-- Wrangle I -->\n\n# Wrangle I\n\n## Tidy Data Principles {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- There are many ways to store data\n\n::: {.fragment .mt1}\n- We will be learning the [tidy data]{.b .blue} format\n    - Data should be *rectangular*\n    - Each [variable]{.green} has its own column\n    - Each [observation]{.green} has its own row\n    - Each [value]{.green} has its own cell\n:::\n\n::: {.fragment .mt1}\n![](../img/tidydata.png)\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li qhdmndwt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Other Data Advice {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Name all variables]{.b .blue} in the first row\n    -   This is called a [header row]{.b .green}\n    \n::: {.fragment .mt1}\n-   [Avoid merged cells]{.b .blue} for data storage\n    -   These are okay for communication\n:::\n\n::: {.fragment .mt1}\n-   [Avoid empty cells]{.b .blue} whenever possible\n    -   Mark [missing data]{.b .green} as `NA`\n:::\n\n::: {.fragment .mt1}\n-   [Avoid formatting-as-data]{.b .blue} for storage\n    -   e.g., non-redundant color-coding\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dizvjgip trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Tidying Example 1 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Name</td>\n    <td>Ann</td>\n    <td>Bob</td>\n    <td>Cat</td>\n    <td>Dom</td>\n  </tr>\n  <tr>\n    <td>Age</td>\n    <td>13</td>\n    <td>10</td>\n    <td>11</td>\n    <td>11</td>\n  </tr>\n  <tr>\n    <td>Weight</td>\n    <td>56.4</td>\n    <td>46.8</td>\n    <td>41.3</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, each row is a variable and each column is an observation.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n    <td>Weight</td>\n  </tr>\n  <tr>\n    <td>Ann</td>\n    <td>13</td>\n    <td>56.4</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>10</td>\n    <td>46.8</td>\n  </tr>\n  <tr>\n    <td>Cat</td>\n    <td>11</td>\n    <td>41.3</td>\n  </tr>\n  <tr>\n    <td>Dom</td>\n    <td>11</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Here, each column is a variable and each row is an observation.\n:::\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Tidying Example 2 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Names:</td>\n    <td>Ann</td>\n    <td>Bob</td>\n    <td>Cat</td>\n    <td>Dom</td>\n  </tr>\n  <tr>\n    <td>Age</td>\n    <td>Weight</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>13</td>\n    <td>56.4</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>10</td>\n    <td>46.8</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>11</td>\n    <td>41.3</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>11</td>\n    <td>43.3</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have data that is not rectangular because the Names variable has its own row.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n    <td>Weight</td>\n  </tr>\n  <tr>\n    <td>Ann</td>\n    <td>13</td>\n    <td>56.4</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>10</td>\n    <td>46.8</td>\n  </tr>\n  <tr>\n    <td>Cat</td>\n    <td>11</td>\n    <td>41.3</td>\n  </tr>\n  <tr>\n    <td>Dom</td>\n    <td>11</td>\n    <td>43.3</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.pv4}\n✔️ Here, we have made the data rectangular by moving the Names variable to its own column.\n:::\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Tidying Example 3 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad table-small\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>country</td>\n    <td>year</td>\n    <td>cases / population</td>\n  </tr>\n  <tr>\n    <td rowspan=2>Afghanistan</td>\n    <td>1999</td>\n    <td>NA / 19987071</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>2666 / 20595360</td>\n  </tr>\n  <tr>\n    <td rowspan=2>Brazil</td>\n    <td>1999</td>\n    <td>37737 / 172006362</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>80488 / 174504898</td>\n  </tr>\n  <tr>\n    <td rowspan=2>China</td>\n    <td>1999</td>\n    <td>212258 / 1272915272</td>\n  </tr>\n  <tr>\n    <td>2000</td>\n    <td>213766 / 1280428583</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have merged cells and two values stored in a single cell.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good table-small\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>country</td>\n    <td>year</td>\n    <td>cases</td>\n    <td>population</td>\n  </tr>\n  <tr>\n    <td>Afghanistan</td>\n    <td>1999</td>\n    <td>NA</td>\n    <td>19987071</td>\n  </tr>\n  <tr>\n    <td>Afghanistan</td>\n    <td>2000</td>\n    <td>2666</td>\n    <td>20595360</td>\n  </tr>\n  <tr>\n    <td>Brazil</td>\n    <td>1999</td>\n    <td>37737</td>\n    <td>172006362</td>\n  </tr>\n  <tr>\n    <td>Brazil</td>\n    <td>2000</td>\n    <td>80488</td>\n    <td>174504898</td>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>1999</td>\n    <td>212258</td>\n    <td>1272915272</td>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>2000</td>\n    <td>213766</td>\n    <td>1280428583</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Here, we have un-merged the countries and separated the cases and populations variables into columns.\n:::\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n\n## Tidying Example 4 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>grade</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>[Amber]{.bg-yellow}</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>[Bristol]{.bg-teal}</td>\n    <td>86.2</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>[Charlene]{.bg-yellow}</td>\n    <td>94.0</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Diego</td>\n    <td>89.3</td>\n    <td>B+</td>\n  </tr>\n  <tr>\n    <td colspan=3>Legend: [Psych. Major]{.bg-yellow}, [Psych. Minor]{.bg-teal}</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have a missing variable name and formatting-as-data.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>psych</td>\n    <td>grade</td>\n    <td>letter</td>\n  </tr>\n  <tr>\n    <td>Amber</td>\n    <td>major</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>Bristol</td>\n    <td>minor</td>\n    <td>86.2</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Charlene</td>\n    <td>major</td>\n    <td>94.0</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Diego</td>\n    <td>NA</td>\n    <td>89.3</td>\n    <td>B+</td>\n  </tr>\n  </tbody>\n</table>\n::: {.pv4}\n✔️ Here, we have added a column for the psych variable, removed the legend, and named the letter variable.\n:::\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n\n## Tidying Example 5 {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Not Tidy\n<table class=\"table-bad\" width=\"100%\">\n  <tbody>\n  <tr>\n    <td>student</td>\n    <td>grade</td>\n    <td>letter</td>\n  </tr>\n  <tr>\n    <td>Amber</td>\n    <td>91.5</td>\n    <td>A-</td>\n  </tr>\n  <tr>\n    <td>Bristol*</td>\n    <td>94.2</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td colspan=3>Class Summary</td>\n  </tr>\n  <tr>\n    <td>As</td>\n    <td>2</td>\n    <td>Yay!</td>\n  </tr>\n  <tr>\n    <td>Bs</td>\n    <td>0</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td colspan=3 class=\"tr\">*Grade was revised.</td>\n  </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n❌ Here, we have two types of data in one file and a footnote as data.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Tidy\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>student</td>\n      <td>grade</td>\n      <td>letter</td>\n      <td>revised</td>\n    </tr>\n    <tr>\n      <td>Amber</td>\n      <td>91.5</td>\n      <td>A-</td>\n      <td>FALSE</td>\n    </tr>\n    <tr>\n      <td>Bristol</td>\n      <td>94.2</td>\n      <td>A</td>\n      <td>TRUE</td>\n    </tr>\n  </tbody>\n</table>\n\n<table class=\"table-good\" width=\"100%\" style=\"margin-top: 1em;\">\n  <tbody>\n    <tr>\n      <td>letter</td>\n      <td>count</td>\n      <td>notes</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>2</td>\n      <td>Yay!</td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>0</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n\n::: {.pv4}\n✔️ Here, we have split the data into two separate tables and added the revised and notes variables.\n:::\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Long vs. Wide Format {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"45%\"}\n#### Wide Format\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>date</td>\n      <td>Boeing</td>\n      <td>Amazon</td>\n      <td>Google</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>$173.55</td>\n      <td>$174.90</td>\n      <td>$174.34</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>$172.61</td>\n      <td>$171.42</td>\n      <td>$170.04</td>\n    </tr>\n  </tbody>\n</table>\n\n::: {.fragment .mt1 .pv4}\n✔️ Here, we have a wide format where each observation is a date.\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.fragment}\n#### Long Format\n<table class=\"table-good\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>date</td>\n      <td>stock</td>\n      <td>price</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>Boeing</td>\n      <td>$173.55</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>Amazon</td>\n      <td>$174.90</td>\n    </tr>\n    <tr>\n      <td>2009-01-01</td>\n      <td>Google</td>\n      <td>$174.34</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>Boeing</td>\n      <td>$172.61</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>Amazon</td>\n      <td>$171.42</td>\n    </tr>\n    <tr>\n      <td>2009-01-02</td>\n      <td>Google</td>\n      <td>$170.04</td>\n    </tr>\n  </tbody>\n</table>\n\n::: { .pv4}\n✔️ Here, we have a long format where each observation is the combination of a date and a stock.\n:::\n:::\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Tibbles {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   R works particularly well with [tidy data]{.b .green}\n\n::: {.fragment .mt1}\n-   We store tidy data in [data frames]{.b .green} or [tibbles]{.b .blue}\n    -   Tibbles are just fancier data frames<br />\n        (i.e., they have a few extra features)\n:::\n\n::: {.fragment .mt1}\n-   To use tibbles, we need the [tidyverse]{.b .blue} package\n:::\n\n::: {.fragment .mt1}\n-   Tibbles are constructed from one or more vectors\n    -   The vectors must have the [same length]{.b .green}\n    -   They can contain [different types]{.b .green} of data\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li jiievwhv trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Vectors {.smaller}\n\n![](../img/vectors.png)\n\n::: {.tc .pv4}\nWe start with three separate vector objects that all have the same length.\n\nWe set it up so that the $n$-th car in each train corresponds to the same observation.\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Tibble {.smaller}\n\n![](../img/tibble.png)\n\n::: {.tc .pv4}\nThen we combine the vectors into a single tibble (or data frame) object.\n\nNow, as the tibble moves around, the variables always stay together.\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Tibbles Live Coding\n\n\n::: {.cell hash='r4ss_day1b_cache/revealjs/unnamed-chunk-5_892f03102b72d8f24755cab4847886c6'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Install and load the tidyverse package\n\n# Extras pane > Packages tab > Install\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# LESSON: Create a tibble from vectors\n\nx <- c(10, 20, 30, 40)\nx\n\ny <- x * 2 - 4\ny\n\nmy_tibble <- tibble(x, y)\nmy_tibble\n\n# ==============================================================================\n\n# USECASE: You can mix different types of vectors in a single tibble\n\nfirst_names <- c(\"Adam\", \"Billy\", \"Caitlyn\", \"Debra\")\n\nage_years <- c(12, 13, 10, NA)\n\nguests <- tibble(first_names, age_years)\nguests\n\n# ==============================================================================\n\n# TIP: To save time, you can also create the vectors in the tibble call\n\ngradebook <- tibble(\n  grade = c(95, 83, 90, 76),\n  letter = c(\"a\", \"b\", \"a-\", \"c\")\n)\ngradebook\n\n# ==============================================================================\n\n# PITFALL: Don't try to combine tibbles with different lengths\n\ny <- c(1, 2, 3)\nx <- c(\"a\", \"b\")\n\ntibble(y, x) #error\n\n# ==============================================================================\n\n# LESSON: However, the exception is R will \"recycle\" a single value\n\ntibble(y, x = \"a\")\n\n# ==============================================================================\n\n# LESSON: You can \"extract\" a vector from a tibble using $\n\nmytibble <- tibble(x = c(1, 2, 3, 4, 5), y = \"test\")\n\nmytibble$x\n\nmytibble$y\n\n# ==============================================================================\n\n# PITFALL: Don't try to extract a vector that doesn't exist\n\nmytibble$z #error\n```\n:::\n\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Importing and Exporting {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Data is usually stored in [data files]{.b .green}\n    -   Importing files into R is called [reading]{.b .blue}\n    -   Exporting files from R is called [writing]{.b .blue}\n\n::: {.fragment .mt1}\n-   A convenient data file type is a CSV\n    -   This stands for [comma-separated values]{.b .green}\n    -   A CSV file is easy to share with other people\n:::\n\n::: {.fragment .mt1}\n-   The [tidyverse]{.b .green} package can read/write CSVs\n    -   Other packages can read/write other types\n        (e.g., *readxl*, *haven*, *rio*, *googlesheets4*)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dhkykqke trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n## Read/Write Live Coding\n\n\n::: {.cell hash='r4ss_day1b_cache/revealjs/unnamed-chunk-6_54cfae839a88ea4ec650b3208148774a'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the tidyverse package (if you haven't yet)\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# USECASE: Create a tibble and write it to a file\n\ngradebook <- tibble(\n  id = c(123, 456, 789),\n  grade = c(\"A\", \"B\", \"A\")\n)\ngradebook\n\nwrite_csv(gradebook, file = \"gradebook.csv\")\n\n# NOTE: You can see the new file in Extras pane > Files tab.\n# You can open the file in another program (e.g., Microsoft Excel).\n# You can also email this file to someone else to share it.\n\n# ==============================================================================\n\n# PITFALL: Don't swap the order of the tibble and the file\n\nwrite_csv(\"gradebook.csv\", gradebook) # error\n\n# ==============================================================================\n\n# USECASE: Read in a file containing data\n\nold_gradebook <- read_csv(\"gradebook.csv\")\nold_gradebook\n\n# NOTE: read_csv() will examine and guess the data type of each variable.\n# You can tell it the data type of each variable, but that is more advanced.\n\n# ==============================================================================\n\n# PITFALL: Don't use the read.csv() and write.csv() functions\n\nold_gradebook <- read.csv(\"gradebook.csv\") # not a tibble\nold_gradebook\n```\n:::\n\n\n::: footer\n\\[1B\\] Wrangle I\n:::\n\n# [Practice II](https://pittmethods.github.io/r4ss/Day_1/Day1B_Practice.html){preview-link=\"false\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}