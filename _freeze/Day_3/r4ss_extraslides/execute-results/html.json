{
  "hash": "361971b5bddba11de14381af84cc2a7d",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"R4SS Extra Slides\"\n    author-meta: \"Jeffrey Girard\"\n---\n\n\n# Program X\n\n## String Manipulation {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   It can be helpful to [transform strings]{.b .blue}\n    -   Sometimes your [data]{.b .green} is text-based\n    -   Text also appears in [tables]{.b .green} and [figures]{.b .green}...\n    -   So we may want to customize it quickly\n\n::: {.fragment .mt1}\n-   Tidyverse contains tools for this\n    -   The functions all begin with `str_`\n    -   We will only discuss the basics\n    -   Learn more at [stringr.tidyverse.org](https://stringr.tidyverse.org/)\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li puvaffet trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nProgram X\n:::\n\n## String Manipulation Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-1_1f6da38e0241f39b47dd17252692af0d'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse for almost all of these functions\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# USECASE: Re-capitalize strings\n\nx <- c(\"R4SS: Introduction to R for Social Scientists\")\n\nstr_to_lower(x)\n\nstr_to_upper(x)\n\nstr_to_sentence(x)\n\nstr_to_title(x)\n\n# ==============================================================================\n\n# USECASE: Extract subsets of strings\n\nx <- c(\"Apple\", \"Banana\", \"Pear\")\n\nstr_sub(x, start = 1, end = 3)\n\nstr_sub(x, start = -3, end = -1)\n\nstr_sub(x, start = 2, end = -2)\n\nstr_sub(x, start = 1, end = 5) # can go beyond the end\n\n# ==============================================================================\n\n# USECASE: Remove whitespace from strings\n\nx <- \"  Sometimes strings have   too   much white space \"\nx\n\nstr_trim(x) # remove white space at the start and end\n\nstr_squish(x) # trim and then collapse inner white space\n\n# ==============================================================================\n\n# USECASE: Remove and replace patterns in strings\n\nx <- \"Scientists very often utilize very fancy words,\n      even when they could utilize simpler ones.\"\n\nstr_remove(x, pattern = \"very \") # removes first pattern match only\n\nstr_remove_all(x, pattern = \"very \") # removes all pattern matches\n\nstr_replace(x, pattern = \"utilize\", replacement = \"use\")\n\nstr_replace_all(x, pattern = \"utilize\", replacement = \"use\")\n\n# NOTE: More complex patterns can be found using regular expressions (regex)\n\n# ==============================================================================\n\n# USECASE: Create a string manipulation pipeline\n\nx_clean <-\n  x |>\n  str_remove_all(\"very \") |>\n  str_replace_all(\"utilize\", \"use\") |>\n  print()\n```\n:::\n\n\n::: footer\nProgram X\n:::\n\n## If Else {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   A [locked door]{.b .green} behaves [conditionally]{.b .blue}\n    -   If you have the key, then open up...\n    -   Otherwise, stay closed...\n\n::: {.fragment .mt1}\n-   Sometimes we want [code]{.b .blue} to behave conditionally\n    -   *Filter* retains observations conditionally<br />\n        (e.g., if it meets a condition, it gets to stay)\n    -   Let's learn to [transform]{.b .green} variables conditionally\n    -   We can use `if_else()` for simple examples\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li efoxgafi trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nProgram X\n:::\n\n## If Else Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-2_c486277e678b837d2b8cd7fe1660b39b'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse for almost all of these functions\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# USECASE: Determining whether someone can vote in the US\n\nage <- 12\n\nage_group <-\n  if_else(\n    condition = age >= 18,\n    true = \"adult\",\n    false = \"child\"\n  ) |>\n  print()\n\n# ==============================================================================\n\n# TIP: Because argument names are optional, we can shorten this (if we want)\n\nage_group <- if_else(age >= 18, \"adult\", \"child\") |> print()\n\n# ==============================================================================\n\n# LESSON: This function is particularly useful applied to vectors\n\nages <- c(13, 18, 14, 19, 22, 16)\n\nage_groups <- if_else(ages >= 18, \"adult\", \"child\") |> print()\n\n# ==============================================================================\n\n# USECASE: We can therefore use it during data wrangling\n\ncereal <- read_csv(\"cereal.csv\", na = \"-999\")\n\ncereal2 <- mutate(cereal, popular = if_else(rating > 50, \"yes\", \"no\"))\ncereal2\n\ncereal3 <-\n  cereal |>\n  mutate(\n    diabetes = if_else(\n      condition = sugars == 0,\n      true = \"sugar-free\",\n      false = \"contains sugar\"\n    )\n  ) |>\n  print()\n```\n:::\n\n\n::: footer\nProgram X\n:::\n\n## Case When {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   An [elevator]{.b .green} also behaves [conditionally]{.b .blue}\n    -   If you press a button, then it goes to that floor\n    -   There are usually more than just two buttons\n    -   In this analogy (but not in real life), the elevator only responds to the [first]{.b .green} button pressed\n\n::: {.fragment .mt1}\n-   Sometimes we want [code]{.b .blue} to behave this way\n    -   `case_when()` expands upon `if_else()`\n    -   It can have [multiple conditions]{.b .blue} (floor buttons)\n    -   The first condition met \"wins\" (picks the floor)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li nwyovgla trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nProgram X\n:::\n\n## Case When Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-3_344a45fd19964c74e5089bdecda0e118'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse for almost all of these functions\n\nlibrary(tidyverse)\n\n# ==============================================================================\n\n# USECASE: Determine what types of movies your kids can watch\n\nages <- c(11, 13, 18)\n\nmovies_allowed <-\n  case_when(\n    ages >= 17 ~ \"R\",\n    ages >= 13 ~ \"PG-13\",\n    ages < 13 ~ \"PG\"\n  ) |>\n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't put the least restrictive condition first\n\nage <- 18\n\nmovies_allowed2 <-\n  case_when(\n    age < 13 ~ \"PG\",\n    age >= 13 ~ \"PG-13\",\n    age >= 17 ~ \"R\"\n  ) |>\n  print() # age >= 13, so PG-13 wins before checking if age >= 17\n\n# ==============================================================================\n\n# USECASE: Use case_when to re-code variables during data wrangling\n\nstarwars\n\nsw <-\n  starwars |>\n  mutate(\n    species3 = case_when(\n      species == \"Human\" ~ \"Human\",\n      species == \"Droid\" ~ \"Droid\",\n      species != \"Human\" & species != \"Droid\" ~ \"Alien\"\n    )\n  ) |>\n  select(name, species3) |>\n  print()\n\n# ==============================================================================\n\n# TIP: The next version of case_when() will add the .default argument\n# This is where the elevator will drop you off if you hit no buttons\n\nsw <-\n  starwars |>\n  mutate(\n    species3 = case_when(\n      species == \"Human\" ~ \"Human\",\n      species == \"Droid\" ~ \"Droid\",\n      .default = \"Alien\"\n    )\n  ) |>\n  select(name, species3) |>\n  print()\n\n# NOTE: The above code won't work now, but it should in a few weeks/months\n# For now, you can use TRUE ~ \"Alien\" and it works but is harder to explain\n```\n:::\n\n\n::: footer\nProgram X\n:::\n\n# Wrangle X\n\n## Pivot Longer and Wider {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Both long and wide formats can be tidy\n    -   Long formats are better for MLM\n    -   Wide formats are better for SEM\n\n::: {.fragment .mt1}\n-   It can be useful to quickly [reshape a tibble]{.b .blue}\n    -   `pivot_longer()`: wide → long\n    -   `pivot_wider()`: long → wide\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li xacejjis trigger=loop delay=3000 speed=0.5 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nWrangle X\n:::\n\n## Pivot Longer Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-4_0ccad780d65376b943ae1395c71a948b'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset (from workshop website)\n\nlibrary(tidyverse)\n\ngradebook <- \n  read_csv(\"gradebook.csv\") |> \n  print()\n\n# ==============================================================================\n\n# USECASE: We can pivot to long format by creating name and value variables\n\ngradebook2 <- \n  gradebook |> \n  pivot_longer(\n    cols = c(test1, test2, test3, test4, test5), \n    names_to = \"test\", \n    values_to = \"grade\"\n  ) |> \n  print()\n\n# ==============================================================================\n\n# TIP: Use selection helpers to select columns quickly\n\ngradebook2 <- \n  gradebook |> \n  pivot_longer(\n    cols = test1:test5, \n    names_to = \"test\", \n    values_to = \"grade\"\n  ) |> \n  print()\n\n# ==============================================================================\n\n# LESSON: Automatically remove the name prefix\n\ngradebook2 <- \n  gradebook|> \n  pivot_longer(\n    cols = starts_with(\"test\"), \n    names_to = \"test\", \n    values_to = \"grade\",\n    names_prefix = \"test\"\n  ) |> \n  print()\n```\n:::\n\n\n::: footer\nWrangle X\n:::\n\n## Pivot Wider Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-5_15aa93ba82cda8adbec444945f047361'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset (from workshop website)\n\nlibrary(tidyverse)\n\ndiary <- read_csv(\"diary.csv\") |> print()\n\n# ==============================================================================\n\n# USECASE: Reshape this long format to a wider format\n\ndiary_scale <- \n  diary |> \n  pivot_wider(\n    names_from = \"scale\",\n    values_from = \"score\"\n  ) |> \n  print()\n\ndiary_day <- \n  diary |>  \n  pivot_wider(\n    names_from = \"day\",\n    values_from = \"score\"\n  ) |> \n  print()\n\n# NOTE: There are thus multiple possible wide formats (for different uses)\n\n# ==============================================================================\n\n# LESSON: We can add a prefix to each name to avoid numeric names\n\ndiary_data\n\ndiary_day <- \n  diary |> \n  pivot_wider(\n    names_from = \"day\",\n    values_from = \"score\",\n    names_prefix = \"day_\"\n  ) |> \n  print()\n\n# ==============================================================================\n\n# LESSON: We can also pivot on multiple columns at once\n\ndiary_double <- \n  diary |> \n  pivot_wider(\n    names_from = c(\"scale\", \"day\"),\n    values_from = \"score\"\n  ) |> \n  print()\n```\n:::\n\n\n::: footer\nWrangle X\n:::\n\n## Across {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We can use `across()` to [repeat an operation]{.b .blue} across multiple variables in a tibble\n    -   This makes our code [shorter]{.b .green}\n    -   It is [faster]{.b .green} to read and write\n    -   It is also [less error-prone]{.b .green}\n\n::: {.fragment .mt1}\n-   So we can repeat a function in order to...\n    -   ...`mutate()` multiple variables\n    -   ...`summarize()` multiple variables\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li iectdupg trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nWrangle X\n:::\n\n## Across Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-6_8fe8e6621746201a3b9ace9b84017240'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nstarwars\n\n# ==============================================================================\n\n# USECASE: Applying the same mutation to multiple variables is a pain\n\nsw <- \n  starwars |> \n  mutate(\n    hair_color = factor(hair_color),\n    skin_color = factor(skin_color),\n    eye_color = factor(eye_color)\n  ) |> \n  print() # before\n\nsw <- \n  starwars |> \n  mutate(\n    across(\n      .cols = c(hair_color, skin_color, eye_color), \n      .fns = factor\n    )\n  ) |> \n  print() #after\n\n# ==============================================================================\n\n# PITFALL: Don't forget to wrap the .cols part in c()\n\nsw <- \n  starwars |> \n  mutate(\n    across(\n      .cols = mass, birth_year, \n      .fns = round,\n      digits = 1\n    )\n  ) |> \n  print() # error\n\n# ==============================================================================\n\n# LESSON: To pass arguments to the inner function, add them inside across()\n\nsw <- \n  starwars |> \n  mutate(\n    across(\n      .cols = c(mass, birth_year), \n      .fns = round,\n      digits = 1\n    )\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: You can also apply the same summary functions across variables\n\nsw <- \n  starwars |> \n  summarize(\n    height = mean(height, na.rm = TRUE),\n    mass = mean(mass, na.rm = TRUE),\n    birth_year = mean(birth_year, na.rm = TRUE)\n  ) |> \n  print()\n\nsw <- \n  starwars |> \n  summarize(\n    across(\n      .cols = c(height, mass, birth_year), \n      .fns = mean, \n      na.rm = TRUE\n    )\n  ) |> \n  print()\n```\n:::\n\n\n::: footer\nWrangle X\n:::\n\n## Separate and Unite {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Tidy data needs one value per cell\n\n::: {.fragment .mt1}\n-   So we may need to [separate]{.b .blue} cells\n    -   *e.g., What was the model of my first car?*\n    -   `\"Nissan Altima 2003\"` ⬎\n    -   `\"Nissan\"` `\"Altima\"` `\"2003\"`\n:::\n\n::: {.fragment .mt1}\n-   But some tasks require us to [unite]{.b .blue} cells\n    -   *e.g., What address should I mail to?*\n    -   `123` `\"Main Street\"` ⬎\n    -   `\"123 Main Street\"`\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dsfanfaz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nWrangle X\n:::\n\n## Separate Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-7_ad89e17b11a2865f8858aff64a894841'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\n# Create some example data\ndat <- \n  tibble(\n    id = c(\"A_001_01\", \"A_002_01\", \"B_001_01\", \"B_002_01\", \"C_001_01\", \"C_002_01\"),\n    duration = c(\"01:16\", \"01:21\", \"01:49\", \"00:34\", \"00:32\", \"00:54\")\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Separate a column into multiple columns\n\ndat2 <- \n  dat |> \n  separate(\n    col = duration, \n    into = c(\"min\", \"sec\"), \n    sep = \":\"\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: This also works with more than two \"into\" columns\n\ndat2 <- \n  dat |>  \n  separate(\n    col = id, \n    into = c(\"group\", \"subject\", \"time\"), \n    sep = \"_\"\n  ) |> \n  print()\n\n# ==============================================================================\n\n# TIP: To automatically convert strings into numbers, use convert\n\ndat2 <- \n  dat |> \n  separate(\n    col = id, \n    into = c(\"group\", \"subject\", \"time\"), \n    sep = \"_\", \n    convert = TRUE\n  ) |> \n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't forget to close the \"into\" vector's parentheses\n\ndat2 <- \n  dat|> \n  separate(col = duration, into = c(\"min\", \"sec\", sep = \":\")) #error\n```\n:::\n\n\n::: footer\nWrangle X\n:::\n\n## Unite Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-8_ff93bdb002f788a0e268607e49b22494'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\ndat2 <- \n  dat|> \n  separate(col = id, into = c(\"group\", \"subject\", \"time\"), sep = \"x\") |> \n  separate(col = duration, into = c(\"min\", \"sec\"), sep = \":\") |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Unite multiple columns into one string\n\ndat3 <- \n  dat2 |> \n  unite(col = \"newid\", group, subject, time, sep = \"-\") |> \n  unite(col = \"duration\", min, sec, sep = \":\") |> \n  print()\n\n# ==============================================================================\n\n# LESSON: Retain the columns being united with remove = FALSE\n\ndat3 <- \n  dat2 |> \n  unite(col = \"newid\", group:time, sep = \"\", remove = FALSE) |> \n  print()\n```\n:::\n\n\n::: footer\nWrangle X\n:::\n\n# Visualize X\n\n## Other Aesthetics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   For blocky elements like bars...\n    -   `color` controls the outline color\n    -   `fill` controls the internal color\n    -   `size` controls the line thickness\n\n::: {.fragment .mt1}\n-   Some mappings will induce [grouping]{.b .green}\n    -   You'll get separate geoms per group\n:::\n\n::: {.fragment .mt1}\n-   It can be helpful to use [redundant]{.b .green} mapping\n    -   Map one variable to multiple aesthetics\n    -   Then if one \"fails\" the other may work\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ntdjhzbp trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\nVisualize X\n:::\n\n## Other Aesthetics Live Coding\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/unnamed-chunk-9_6ac38d75db98f57529b6dacd3a96601e'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Mapping the shape aesthetic to a categorical variable\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv)) +\n  geom_point(size = 3)\n\n# ==============================================================================\n\n# PITFALL: Don't try to map shape to a continuous variable\n\nggplot(mpg, aes(x = displ, y = hwy, shape = hwy)) + \n  geom_point() #error\n\n# NOTE: This doesn't work because there are way more numbers than shapes\n\n# ==============================================================================\n\n# LESSON: Color vs. Fill and Size for Blocks\n\nggplot(mpg, aes(y = class)) + \n  geom_bar()\n\nggplot(mpg, aes(y = class)) + \n  geom_bar(color = \"darkred\", fill = \"lightblue\", size = 1)\n\n# ==============================================================================\n\n# LESSON: Some aesthetics cause grouping when mapped to a categorical variable\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  geom_smooth(method = \"lm\") # single smooth\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point() + \n  geom_smooth(method = \"lm\") # three smooths\n\n# ==============================================================================\n\n# USECASE: Mapping to the fill aesthetic and setting the alpha property\n\nggplot(mpg, aes(x = hwy, fill = drv)) + \n  geom_density()\n\nggplot(mpg, aes(x = hwy, fill = drv)) + \n  geom_density(alpha = 0.3)\n\n# ==============================================================================\n\n# TIP: If you map the same variable to multiple aesthetics, you get redundancy\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv, color = drv)) +\n  geom_point(size = 3) # if color fails, shape still works\n```\n:::\n\n\n::: footer\nVisualize X\n:::\n\n## Describe this Graphic 1 {.smaller}\n\n::: {.columns}\n::: {.column width=\"60%\"}\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/dtg1_bb86774ac74748a546270c8cf180e34f'}\n::: {.cell-output-display}\n![](r4ss_extraslides_files/figure-revealjs/dtg1-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n**Data**\n\n- `starwars` \\{tidyverse\\}\n\n**Aesthetics/Scales**\n\n::: {.fragment}\n- `height` to X (continuous)\n- `mass` to Y (continuous)\n:::\n\n**Geoms**\n\n::: {.fragment}\n- Point (dots)\n- Smooth (local)\n:::\n\n:::\n:::\n\n::: footer\nVisualize X\n:::\n\n## Describe this Graphic 2 {.smaller}\n\n::: {.columns}\n::: {.column width=\"60%\"}\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/dtg2_6aee924ef7f98d347c583192b107457a'}\n::: {.cell-output-display}\n![](r4ss_extraslides_files/figure-revealjs/dtg2-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n**Data**\n\n- `mpg` \\{tidyverse\\}\n\n**Aesthetics/Scales**\n\n::: {.fragment}\n- `displ` to X (continuous)\n- `hwy` to Y (continuous)\n- `drv` to color (discrete)\n:::\n\n**Geoms**\n\n::: {.fragment}\n- Point (dots)\n- Smooth (linear)\n:::\n\n:::\n:::\n\n::: footer\nVisualize X\n:::\n\n## Describe this Graphic 3 {.smaller}\n\n::: {.columns}\n::: {.column width=\"60%\"}\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/dtg3_423ae1cfca86afdfcb84b9292e5d7bd4'}\n::: {.cell-output-display}\n![](r4ss_extraslides_files/figure-revealjs/dtg3-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n**Data**\n\n- `mpg` \\{tidyverse\\}\n\n**Aesthetics/Scales**\n\n::: {.fragment}\n- `hwy` to X (continuous)\n- `class` to Y (discrete)\n:::\n\n**Geoms**\n\n::: {.fragment}\n- Boxplot (fill = lightblue)\n- VLine (xintercept = 20)\n:::\n\n:::\n:::\n\n::: footer\nVisualize X\n:::\n\n## Describe this Graphic 4 {.smaller}\n\n::: {.columns}\n::: {.column width=\"60%\"}\n\n\n::: {.cell hash='r4ss_extraslides_cache/revealjs/dtg4_5d32e1f31b07e1393f0348e603877d5b'}\n::: {.cell-output-display}\n![](r4ss_extraslides_files/figure-revealjs/dtg4-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n**Data**\n\n- `flights` \\{nycflights13\\}\n\n**Aesthetics/Scales**\n\n::: {.fragment}\n- `origin` to X (discrete)\n- `origin` to color (discrete)\n- `count` to Y (stat from geom)\n:::\n\n**Geoms**\n\n::: {.fragment}\n- Bar (fill = white)\n:::\n\n:::\n:::\n\n::: footer\nVisualize X\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}