{
  "hash": "540b9c0fc35488b435210ba257c71d7d",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"R4SS Day 3A\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2022-07-27\"\n---\n\n\n::: {.my-title}\n# [Introduction to R]{.blue} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 3A | 2022-07-27]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n<!-- Model I -->\n\n# Model I\n\n## Data Verification {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   It's always a good idea to start with [verification]{.b .blue}\n\n::: {.fragment .mt1}\n-   Check that your variables are the [correct type]{.b .green}\n    -   Configure your [factors]{.b .green}' levels and labels\n    -   Establish ordinal factors' ordering\n    -   Explicitly set your [missing values]{.b .green} to NA\n:::\n\n::: {.fragment .mt1}\n-   Check variables' [extrema]{.b .green} and [distributions]{.b .green}\n    -   Check for erroneous and outlying values\n    -   Check the shape of continuous distributions\n    -   Check the overlap of categorical levels\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li zqwicaxf trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Data Verification Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-1_18c58dd3eec206fa7f562eda3b7db6f3'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP:\n\nlibrary(tidyverse)\nlibrary(datawizard)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# LESSON: First, set all your categorical variables to factors\n\nsalaries\n\nsalaries <- \n  salaries |> \n  mutate(across(c(rank, discipline, sex), factor)) |> \n  print()\n\n# ==============================================================================\n\n# LESSON: Then check the summary statistics for problems\n\nsummary(salaries)\n\ndescribe_distribution(salaries)\n\ndata_tabulate(salaries, exclude = is.numeric)\n\n# ==============================================================================\n\n# LESSON: Finally, check for empty level-combinations\n\nsalaries |> \n  group_by(rank, discipline, sex) |> \n  summarize(n = n()) |> \n  arrange(n)\n```\n:::\n\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Distribution Geoms {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Variable distributions]{.b .blue} are critical in data analysis\n    -   What are the most and least [common values]{.b .green}?\n    -   What are the [extrema]{.b .green} (min and max values)?\n    -   Are there any [outliers]{.b .green} or impossible values?\n    -   How much [spread]{.b .green} is there in the variable?\n    -   What [shape]{.b .green} does the distribution take?\n\n::: {.fragment .mt1}\n-   Visualization is a quick way to [assess]{.b .green} this\n    -   They can also [communicate]{.b .green} it to others\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li wovwohsm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Distribution Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-2_9f563f83aee6a3cb6eb7a0940f9e160d'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# USECASE: Creating histograms\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram()\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(bins = 20)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2, color = \"red\", size = 1)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2, color = \"red\", size = 1, fill = \"white\")\n\n# ==============================================================================\n\n# USECASE: Creating density plots\n\nggplot(salaries, aes(x = salary)) + geom_density()\n\nggplot(salaries, aes(x = salary)) + \n  geom_density(color = \"red\", size = 1, fill = \"white\")\n\n# ==============================================================================\n\n# USECASE: Creating box plots\n\nggplot(salaries, aes(x = salary)) + geom_boxplot()\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_boxplot(varwidth = TRUE)\n\n# ==============================================================================\n\n# USECASE: Creating bar plots to count categorical variables\n\nggplot(salaries, aes(x = rank)) + geom_bar()\n\n# ==============================================================================\n\n# PITFALL: Don't try to create histograms for categorical variables\n\nggplot(salaries, aes(x = rank)) + geom_histogram() #error\n```\n:::\n\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Correlations {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Correlations]{.b .blue} $(r)$ quantify the strength of the [linear relationship]{.b .green} between two variables from $-1$ to $+1$\n    -   $r\\rightarrow-1$: as $x$ increases, $y$ decreases\n    -   $r\\rightarrow0$: as $x$ increases, $y$ doesn't change\n    -   $r\\rightarrow+1$: as $x$ increases, $y$ also increases\n\n::: {.fragment .mt1}\n-   Correlations may be the focus of statistical inference or just useful descriptive summaries\n:::\n\n::: {.fragment .mt1}\n-   We can easily estimate many [different types]{.b .green} of correlation coefficients in R\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li nbdmfygb trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Correlations Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-3_c6289ed22a72451fc264dc085fd57423'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(correlation)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# LESSON: The standard correlation test in R\n\ncor.test(salaries$salary, salaries$yrs.since.phd)\n\n# ==============================================================================\n\n# TIP: Fancier correlations with the {correlation} package (from {easystats})\n\ncorrelation(salaries)\n\n# ==============================================================================\n\n# LESSON: Creating a graphical model plot (requires installing some packages)\n\ncorrelation(salaries) |> plot()\n\n# ==============================================================================\n\n# LESSON: Creating and plotting the correlation matrix\n\ncorrelation(salaries) |> summary()\n\ncorrelation(salaries) |> summary() |> plot()\n\ncorrelation(salaries) |> summary(redundant = TRUE) |> plot()\n\n# ==============================================================================\n\n# p-value adjustments\n\ncorrelation(salaries, p_adjust = \"none\") # very liberal\n\ncorrelation(salaries, p_adjust = \"bonferroni\") # very conservative\n\ncorrelation(salaries, p_adjust = \"holm\") # recommended\n\n# ==============================================================================\n\n# LESSON: Other correlation methods\n\ncorrelation(salaries, method = \"kendall\") # rank correlation\n\ncorrelation(salaries, method = \"blomqvist\") # similar to kendall but better\n\ncorrelation(salaries, method = \"distance\") # linear and nonlinear relationships\n```\n:::\n\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Comparing Two Groups {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   A fundamental task in science is comparing the [centrality]{.b .green} of two groups' distributions\n    -   It is common to compare means or medians\n\n::: {.fragment .mt1}\n-   [Independent]{.b .blue} groups are [separate]{.b .green}\n    -   Comparisons are [between]{.b .green} subjects\n    -   *Did students in New York or students in California spend more time on social media?*\n:::\n\n::: {.fragment .mt1}\n-   [Dependent]{.b .blue} groups are [paired]{.b .green}\n    -   Comparisons are [within]{.b .green} subjects\n    -   *Did the students in my class spend more time on social media during the winter or the summer?*\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li wfkxiwtw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Independent Groups Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-4_f1d87eab81e2c5b9fbb575e43ae98cbc'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(statsExpressions)\nlibrary(ggstatsplot)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# USECASE: Let's compare the salaries across the two disciplines\n\ntwo_sample_test(\n  data = salaries, \n  x = discipline, \n  y = salary, \n  type = \"parametric\"\n)\n\n# ==============================================================================\n\n# LESSON: We can also estimate each group's means by swapping the function\n\ncentrality_description(\n  data = salaries,\n  x = discipline, \n  y = salary, \n  type = \"parametric\"\n)\n\n# ==============================================================================\n\n# LESSON: Nonparametric does not assume a normal distribution of y\n\ntwo_sample_test(\n  data = salaries, \n  x = discipline, \n  y = salary, \n  type = \"nonparametric\"\n)\n\ncentrality_description(\n  data = salaries, \n  x = discipline, \n  y = salary, \n  type = \"nonparametric\"\n)\n\n# ==============================================================================\n\n# TIP: Calculate the test results and generate a plot using {ggstatsplot}\n\nggbetweenstats(\n  data = salaries, \n  x = discipline, \n  y = salary, \n  type = \"parametric\"\n)\n\nggbetweenstats(\n  data = salaries, \n  x = discipline, \n  y = salary, \n  type = \"nonparametric\"\n)\n```\n:::\n\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Dependent Groups Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-5_8589dacbc8c343b9ef4aa2ba05b830e3'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(statsExpressions)\nlibrary(ggstatsplot)\n\ninterpersonal <- read_csv(\"interpersonal.csv\")\ninterpersonal\n\n# ==============================================================================\n\n# LESSON: Be sure to set paired to TRUE and provide a subject.id\n\ntwo_sample_test(\n  data = interpersonal,\n  x = time,\n  y = problems,\n  paired = TRUE,\n  subject.id = patient,\n  type = \"parametric\"\n)\n\ncentrality_description(\n  data = interpersonal,\n  x = time,\n  y = problems,\n  type = \"parametric\"\n)\n\n# ==============================================================================\n\n# LESSON: There is a nonparametric version of this too\n\ntwo_sample_test(\n  data = interpersonal,\n  x = time,\n  y = problems,\n  paired = TRUE,\n  subject.id = patient,\n  type = \"nonparametric\"\n)\n\ncentrality_description(\n  data = interpersonal,\n  x = time,\n  y = problems,\n  type = \"nonparametric\"\n)\n\n# ==============================================================================\n\n# TIP: No need to add paired because we are switching to ggwithinstats()\n\nggwithinstats(\n  data = interpersonal, \n  x = time, \n  y = problems,\n  subject.id = patient,\n  type = \"parametric\"\n)\n\nggwithinstats(\n  data = interpersonal, \n  x = time, \n  y = problems,\n  subject.id = patient,\n  type = \"nonparametric\"\n)\n```\n:::\n\n\n## Comparing Many Groups {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We may also compare [more than two]{.b .green} groups\n    -   Independent vs. dependent still applies\n\n::: {.fragment .mt1}\n-   An [omnibus test]{.b .blue} asks *whether* groups are different\n    -   If significant, one or more group is different\n:::\n\n::: {.fragment .mt1}\n-   [Posthoc tests]{.b .blue} ask *how* groups are different\n    -   Pairwise tests compare each pair of groups\n    -   They are often \"gated\" behind omnibus tests\n    -   With many groups, *p*-values are adjusted\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dugfwxlj trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Many Independent Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-6_9362e77b64cfd8fc97f8d9209e9be71d'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(statsExpressions)\nlibrary(ggstatsplot)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# USECASE: Let's compare the salaries across the three ranks\n\noneway_anova(\n  data = salaries,\n  x = rank,\n  y = salary,\n  type = \"parametric\"\n)\n\ncentrality_description(\n  data = salaries,\n  x = rank,\n  y = salary,\n  type = \"parametric\"\n)\n\noneway_anova(\n  data = salaries,\n  x = rank,\n  y = salary,\n  type = \"nonparametric\"\n)\n\n# ==============================================================================\n\n# USECASE: Let's compare the salaries between each pair of ranks\n\npairwise_comparisons(\n  data = salaries,\n  x = rank,\n  y = salary,\n  type = \"parametric\"\n)\n\npairwise_comparisons(\n  data = salaries,\n  x = rank,\n  y = salary,\n  type = \"nonparametric\"\n)\n\n# ==============================================================================\n\n# TIP: Do it all (overall and pairwise tests) with ggbetweenstats\n\nggbetweenstats(\n  data = salaries, \n  x = rank, \n  y = salary,\n  type = \"parametric\"\n)\n\nggbetweenstats(\n  data = salaries, \n  x = rank, \n  y = salary,\n  type = \"nonparametric\"\n)\n```\n:::\n\n\n::: footer\n\\[3A\\] Model I\n:::\n\n## Many Dependent Live Coding\n\n\n::: {.cell hash='r4ss_day3a_cache/revealjs/unnamed-chunk-7_302d8275d4de7edd88318118591d32b6'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(statsExpressions)\nlibrary(ggstatsplot)\n\nelicitation <- read_csv(\"elicitation.csv\")\nelicitation\n\n# ==============================================================================\n\n# USECASE: Let's compare the amusement self-reports across the four tasks\n\noneway_anova(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  paired = TRUE,\n  subject.id = Subject,\n  type = \"parametric\"\n)\n\ncentrality_description(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  type = \"parametric\"\n)\n\noneway_anova(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  paired = TRUE,\n  subject.id = Subject,\n  type = \"nonparametric\"\n)\n\n# ==============================================================================\n\n# USECASE: Let's compare the amusement self-reports between each pair of tasks\n\npairwise_comparisons(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  paired = TRUE,\n  subject.id = Subject,\n  type = \"parametric\"\n)\n\npairwise_comparisons(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  paired = TRUE,\n  subject.id = Subject,\n  type = \"nonparametric\"\n)\n\n# ==============================================================================\n\n# TIP: Do it all (overall and pairwise tests) with ggwithinstats\n\nggwithinstats(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  paired = TRUE,\n  subject.id = Subject,\n  type = \"parametric\"\n)\n\nggwithinstats(\n  data = elicitation,\n  x = Task,\n  y = Amused,\n  paired = TRUE,\n  subject.id = Subject,\n  type = \"nonparametric\"\n)\n```\n:::\n\n\n::: footer\n\\[3A\\] Model I\n:::\n\n<!-- Practice V -->\n\n# [Practice V](https://pittmethods.github.io/r4ss/Day_3/Day3A_Practice.html){preview-link=\"false\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}